image: comp2310/assignment_1:latest

stages:
  - filecheck
  - build
  - test
  - render

build-mymalloc:
  allow_failure: true
  stage: build
  tags:
    - comp2300
  artifacts:
    when: always
    paths:
      - tests/
      - libmymalloc.so
    exclude:
      - tests/*.c
      - tests/*.h
  script:
    - cd /files/ 
    - cp -f -r tests/. "$CI_PROJECT_DIR/tests/"
    - cp -f Makefile "$CI_PROJECT_DIR/"
    - cp -f mymalloc.h "$CI_PROJECT_DIR/"
    - cd $CI_PROJECT_DIR
    - make tests 

build-mygc:
  allow_failure: true
  stage: build
  tags: 
    - comp2300
  artifacts:
    when: always
    paths:
      - libmygc.so
      - test-build-mygc.md
  script:
    - cd /files/
    - cp -f Makefile "$CI_PROJECT_DIR/"
    - cp -f mymalloc.h "$CI_PROJECT_DIR/"
    - cp -f mygc.h "$CI_PROJECT_DIR/"
    - cd $CI_PROJECT_DIR
    - make mygc
    - echo "mygc successfully compiled" > test-build-mygc.md



test-align:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-align.md
  variables:
    test_name: "align"
    file_name: "test-align.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-all_lists:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-all_lists.md
  variables:
    test_name: "all_lists"
    file_name: "test-all_lists.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-arrays:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-arrays.md
  variables:
    test_name: "arrays"
    file_name: "test-arrays.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-exact:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-exact.md
  variables:
    test_name: "exact"
    file_name: "test-exact.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-free_test:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-free_test.md
  variables:
    test_name: "free_test"
    file_name: "test-free_test.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-large:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-large.md
  variables:
    test_name: "large"
    file_name: "test-large.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi


test-malloc_too_large:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-malloc_too_large.md
  variables:
    test_name: "malloc_too_large"
    file_name: "test-malloc_too_large.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-malloc_zero:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-malloc_zero.md
  variables:
    test_name: "malloc_zero"
    file_name: "test-malloc_zero.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi


test-oom0:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-oom0.md
  variables:
    test_name: "oom0"
    file_name: "test-oom0.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-random_free:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-random_free.md
  variables:
    test_name: "random_free"
    file_name: "test-random_free.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name 
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-random:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-random.md
  variables:
    test_name: "random"
    file_name: "test-random.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi

test-simple1:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-simple1.md
  variables:
    test_name: "simple1"
    file_name: "test-simple1.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi


test-simple2:
  allow_failure: true
  timeout: 10 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build-mymalloc
      artifacts: true
  artifacts:
    when: always
    paths:
      - test-simple2.md
  variables:
    test_name: "simple2"
    file_name: "test-simple2.md"
  script:
    - touch $file_name
    - FAILED=0
    - echo "Result of Test $test_name" > $file_name 
    - echo "" >> $file_name 
    - ./tests/$test_name >>$file_name 2>&1 || FAILED=$?
    - echo "" >> $file_name 
    - > 
      if [ $FAILED -ne 0 ]; then  
        echo "Test failed!"
        echo "" >> $file_name
        cat $file_name
        echo ""
        exit 1
      else 
        echo "Test passed!"
        echo "Passed!" >> $file_name
      fi


report:
  image: brentschuetze/comp2300-microbit-test:latest
  stage: filecheck
  allow_failure: true
  tags:
    - comp2300
  script:
    - python3 /scripts/validate.py exists report.md
    - var="$(cat report.md | wc -w)"
    - >
      echo "Word Count: $var"
    - > 
      if (( $var > 300)); then
          if (( $var > 1200)); then
            echo "Your report should be < 1000 words!";
            exit 1;
          else
            exit 0;
          fi
      else
        echo "Your report should probably be more than 300 words!";
        exit 1;
      fi

statement-of-originality:
  image: brentschuetze/comp2300-microbit-test:latest
  stage: filecheck
  allow_failure: true
  tags:
    - comp2300
  artifacts:
    when: always
    paths:
      - references.md
    reports:
      dotenv: student.env
  script:
    - python3 /scripts/validate.py get-student statement-of-originality.md
    - python3 /scripts/validate.py get-content statement-of-originality.md -C references.md
    - python3 /scripts/validate.py schema ./statement-of-originality.md https://comp.anu.edu.au/courses/comp1720/assets/schemas/soo-md.json

pdf:
  stage: render
  tags:
    - comp2300
  image: 
    name: brentschuetze/comp2300-md2pdf:latest
  needs:
    - job: build-mygc
      artifacts: true
    - job: test-align
      artifacts: true
    - job: test-all_lists
      artifacts: true
    - job: test-arrays
      artifacts: true
    - job: test-exact
      artifacts: true
    - job: test-free_test
      artifacts: true
    - job: test-large
      artifacts: true
    - job: test-malloc_too_large
      artifacts: true
    - job: test-malloc_zero
      artifacts: true
    - job: test-oom0 
      artifacts: true
    - job: test-random_free
      artifacts: true
    - job: test-random
      artifacts: true
    - job: test-simple1
      artifacts: true
    - job: test-simple2
      artifacts: true
    - job: statement-of-originality
      artifacts: true
    - job: report 
      artifacts: true 
  variables:
    PDF_NAME: '$CI_PROJECT_ROOT_NAMESPACE-$CI_PROJECT_NAME.pdf'
    assignment_name: Assignment 1
  script:
    # Create files if don't exist already
    - touch references.md
    - touch report.md
    - touch test-align.md
    - touch test-all_lists.c
    - touch test-arrays.md
    - touch test-exact.md
    - touch test-free_test.md
    - touch test-large.md
    - touch test-malloc_too_large.md 
    - touch test-malloc_zero.md
    - touch test-oom0.md 
    - touch test-random_free.md 
    - touch test-random.md 
    - touch test-simple1.md 
    - touch test-simple2.md 
    - touch build-mygc.md 

    # Check ENV Vars
    - echo $PDF_NAME
    - echo $STUDENT_NAME
    - echo $STUDENT_UID
    - echo "REFERENCES:"
    - cat references.md

    # Build pdf.md
    ## Preamble
    - echo "---" > pdf.md
    - echo "pdf_options:" >> pdf.md
    - |
      echo "  displayHeaderFooter: true" >> pdf.md
    - |
      echo "  format: A4" >> pdf.md
    - |
      echo "  margin: 25mm" >> pdf.md
    - |
      echo "  printBackground: true" >> pdf.md
    - | 
      echo "  headerTemplate: |-" >> pdf.md
    - echo "    <style>" >> pdf.md
    - echo "      section {" >> pdf.md
    - | 
      echo "        display: block;" >> pdf.md
    - | 
      echo "        margin: 0 auto;" >> pdf.md
    - | 
      echo "        padding-left: 13mm;" >> pdf.md
    - | 
      echo "        padding-right: 13mm;" >> pdf.md
    - | 
      echo "        width: 100%;" >> pdf.md
    - | 
      echo "        font-size: 8px;" >> pdf.md
    - echo "      }" >> pdf.md
    - echo "      .lleft {" >> pdf.md
    - | 
      echo "        float: left;" >> pdf.md
    - echo "      }" >> pdf.md
    - echo "      .rright {" >> pdf.md
    - | 
      echo "        float: right;" >> pdf.md
    - echo "      }" >> pdf.md
    - echo "    </style>" >> pdf.md
    - echo "    <section>" >> pdf.md
    - echo '      <span class="title lleft"></span>' >> pdf.md
    - echo '      <span class="date rright"></span>' >> pdf.md
    - echo "    </section>" >> pdf.md
    - | 
      echo "  footerTemplate: |-" >> pdf.md
    - echo "    <section>" >> pdf.md
    - echo '      <div class="rright">' >> pdf.md
    - echo '        <span class="pageNumber"></span>' >> pdf.md
    - echo '        / <span class="totalPages"></span>' >> pdf.md
    - echo "      </div>" >> pdf.md
    - echo "    </section>" >> pdf.md
    - echo "---" >> pdf.md

    - echo "" >> pdf.md
    - echo "# $assignment_name" >> pdf.md
    - echo "## Student Details" >> pdf.md
    - > 
      echo "- **uid**: $STUDENT_UID" >> pdf.md
    - > 
      echo "- **name**: $STUDENT_NAME" >> pdf.md
    - echo "" >> pdf.md

    # Test Results Section 
    - echo "## Test Results" >> pdf.md
    - echo "" >> pdf.md 

    ## align  
    - echo "### align" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-align.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## all_lists 
    - echo "" >> pdf.md 
    - echo "### all_lists" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-all_lists.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## arrays 
    - echo "" >> pdf.md 
    - echo "### arrays" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-arrays.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## exact 
    - echo "" >> pdf.md 
    - echo "### exact" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-exact.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## free_test 
    - echo "" >> pdf.md 
    - echo "### free_test" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-free_test.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## large 
    - echo "" >> pdf.md 
    - echo "### large" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-large.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## malloc_too_large 
    - echo "" >> pdf.md 
    - echo "### exact" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-malloc_too_large.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## malloc_zero 
    - echo "" >> pdf.md 
    - echo "### malloc_zero" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-malloc_zero.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## oom0
    - echo "" >> pdf.md 
    - echo "### oom0" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-oom0.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## random_free
    - echo "" >> pdf.md 
    - echo "### random_free" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-random_free.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## random
    - echo "" >> pdf.md 
    - echo "### random" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-random.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## simple1
    - echo "" >> pdf.md 
    - echo "### simple1" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-simple1.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## simple2
    - echo "" >> pdf.md 
    - echo "### simple2" >> pdf.md 
    - echo "" >> pdf.md 
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md 
    - cat test-simple2.md >> pdf.md
    - echo -n '`' >> pdf.md && echo -n '`' >> pdf.md && echo '`' >> pdf.md
    - echo "" >> pdf.md

    ## result of compiling mygc (since we include no tests specifically for it)
    - echo "" >> pdf.md
    - echo "### mygc" >> pdf.md
    - echo "" >> pdf.md 
    - cat build-mygc.md >> pdf.md
    - echo "" >> pdf.md

    - echo "" >> pdf.md 

    # Report 
    - echo "<div class='page-break'> </div>" >> pdf.md
    - echo "" >> pdf.md
    - cat report.md >> pdf.md
    - echo "" >> pdf.md
    - echo "" >> pdf.md


    ## References
    - echo "" >> pdf.md
    - echo "<div class='page-break'> </div>" >> pdf.md
    - echo "" >> pdf.md
    - cat references.md >> pdf.md
    - echo "" >> pdf.md

    # Final md doc
    - cat pdf.md
    # Render
    - | 
      md-to-pdf --launch-options '{ "args": ["--no-sandbox"] }' \
                --highlight-style 'vs2015' \
                --document-title "$assignment_name" \
                --css 'body { font-family: helvetica }'  \
                pdf.md
    - mv pdf.pdf "$PDF_NAME"

  artifacts:
    paths:
      - $PDF_NAME
